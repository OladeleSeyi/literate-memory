service: verify-users-bank-account-service

package:
  individually: true

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the primary  table name here so we can use it while testing locally
  bankAccountTable: ${self:custom.stage}-bankAccountTable
  bankAccountNumberGSI: ${self:custom.stage}-bankAccountNumberGSI
plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: test
  region: us-east-2
  lambdaHashingVersion: "20201221"
  environment:
    bankAccountTable: ${self:custom.bankAccountTable}
    bankAccountNumberGSI: ${self:custom.bankAccountNumberGSI}
    PAYSTACK_SK: ${env:PAYSTACK_SK}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem

      Resource:
        - "Fn::GetAtt": [BankAccountTable, Arn]

functions:
  graphql:
    handler: graphQlHandler.server
    environment:
      SLS_DEBUG: true
    events:
      - http:
          path: /graphiql
          method: post
          cors: true
  playground:
    handler: graphQlHandler.playground
    events:
      - http:
          path: /graphiql
          method: get
          cors: true

resources:
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
